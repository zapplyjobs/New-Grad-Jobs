name: Update Zapply Jobs

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - '.github/scripts/job-fetcher/**'
      - '.github/scripts/real-career-scraper.js'
      - '.github/scripts/enhanced-discord-bot.js'

# Prevent concurrent runs to avoid git conflicts
concurrency:
  group: update-jobs
  cancel-in-progress: false  # Don't cancel, wait for previous to finish

jobs:
  update-jobs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper rebasing
        token: ${{ secrets.GITHUB_TOKEN }}  # Use default token for pushing
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
        
    - name: Install scraper dependencies
      working-directory: jobboard
      run: npm install puppeteer
      
    - name: Update job listings
      env:
        JSEARCH_API_KEY: ${{ secrets.JSEARCH_API_KEY }}
      run: node .github/scripts/job-fetcher/index.js


    - name: Install bot dependencies
      working-directory: .github/scripts
      run: npm install discord.js@14

    - name: Post new jobs via Enhanced Bot
      run: node .github/scripts/enhanced-discord-bot.js
      env:
        DISCORD_TOKEN:       ${{ secrets.DISCORD_TOKEN }}
        DISCORD_CHANNEL_ID:  ${{ secrets.DISCORD_CHANNEL_ID }}
        DISCORD_CLIENT_ID:   ${{ secrets.DISCORD_CLIENT_ID }}
        DISCORD_GUILD_ID:    ${{ secrets.DISCORD_GUILD_ID }}

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Found changes in README"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        fi
      
    - name: Commit updated job board
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "team@zapply.ai"
        git config --local user.name "Zapply Team"
        git add -A
        
        # Get job count from README for commit message
        JOB_COUNT=$(grep -o "Active Positions\*\*: [0-9]*" README.md | grep -o "[0-9]*" || echo "0")
        COMPANY_COUNT=$(grep -o "Companies\*\*: [0-9]*" README.md | grep -o "[0-9]*" || echo "0")
        
        git commit -m "Update jobs - $(date +'%Y-%m-%d')
        
        Found $JOB_COUNT positions from $COMPANY_COUNT companies
        Updated categories, locations, and experience levels
        Next update tomorrow"
        
    - name: Push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        # Configure git for retries
        git config pull.rebase true
        git config rebase.autoStash true

        # Function to retry push with exponential backoff
        push_with_retry() {
          local max_attempts=3
          local attempt=1
          local wait_time=5

          while [ $attempt -le $max_attempts ]; do
            echo "Push attempt $attempt of $max_attempts..."

            # Try to push
            if git push origin main; then
              echo "✅ Successfully pushed changes!"
              return 0
            fi

            # If push failed, pull latest changes and try again
            echo "Push failed, pulling latest changes..."
            git fetch origin main

            # Try rebasing first (cleaner history)
            if git rebase origin/main; then
              echo "Rebased successfully, retrying push..."
            else
              echo "Rebase failed, aborting and trying merge..."
              git rebase --abort
              git pull origin main --no-edit --strategy-option=theirs
            fi

            # Wait before next attempt (exponential backoff)
            if [ $attempt -lt $max_attempts ]; then
              echo "Waiting ${wait_time} seconds before retry..."
              sleep $wait_time
              wait_time=$((wait_time * 2))
            fi

            attempt=$((attempt + 1))
          done

          echo "❌ Failed to push after $max_attempts attempts"
          return 1
        }

        # Execute the push with retry logic
        push_with_retry
        
    - name: Create job summary
      run: |
        echo "## 🚀 Zapply Jobs Updated!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.verify-changed-files.outputs.changed }}" == "true" ]; then
          # Extract stats from README
          JOB_COUNT=$(grep -o "Active Positions\*\*: [0-9]*" README.md | grep -o "[0-9]*" || echo "0")
          COMPANY_COUNT=$(grep -o "Companies\*\*: [0-9]*" README.md | grep -o "[0-9]*" || echo "0")
          FAANG_COUNT=$(grep -o "FAANG+ Jobs\*\*: [0-9]*" README.md | grep -o "[0-9]*" || echo "0")
          
          echo "✅ **Successfully updated job board with fresh opportunities**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Today's Haul:" >> $GITHUB_STEP_SUMMARY  
          echo "- 🎯 **$JOB_COUNT total positions** from elite tech companies" >> $GITHUB_STEP_SUMMARY
          echo "- 🏢 **$COMPANY_COUNT companies** tracked (FAANG, unicorns, startups)" >> $GITHUB_STEP_SUMMARY
          echo "- ⭐ **$FAANG_COUNT FAANG+ jobs** from top-tier companies" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Search Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Multi-location search**: SF Bay Area, NYC, Seattle, Austin, Remote" >> $GITHUB_STEP_SUMMARY
          echo "- 🎓 **All experience levels**: Entry-level to Senior positions" >> $GITHUB_STEP_SUMMARY
          echo "- 💼 **10+ role categories**: SWE, ML/AI, Data, Mobile, DevOps, Product, Design" >> $GITHUB_STEP_SUMMARY
          echo "- 🏆 **Elite companies only**: FAANG, unicorns, top startups, gaming leaders" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Quality Filters Applied:" >> $GITHUB_STEP_SUMMARY
          echo "- ✨ Removed duplicates and spam postings" >> $GITHUB_STEP_SUMMARY
          echo "- 🏢 Normalized company names and subsidiaries" >> $GITHUB_STEP_SUMMARY  
          echo "- 📊 Ranked by company tier (FAANG first)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 Verified direct application links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔄 Next update**: Tomorrow at 9 AM UTC" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No new opportunities found - job board is current**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All tracked companies have been checked for new postings." >> $GITHUB_STEP_SUMMARY
          echo "The existing job listings are still fresh and active." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🔄 Next check**: Tomorrow at 9 AM UTC" >> $GITHUB_STEP_SUMMARY
        fi
